apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'eclipse'
apply plugin: 'project-report'

mainClassName = 'com.akonizo.splendor.stats'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all'
    compile ( 'com.orientechnologies:orientdb-graphdb' ) { exclude module:'commons-logging' }
    compile 'org.apache.commons:commons-math3:3.5'
    compile 'org.slf4j:slf4j-api'
    compile 'org.slf4j:slf4j-ext'

    runtime 'org.slf4j:jcl-over-slf4j'
    runtime 'org.slf4j:log4j-over-slf4j'
    runtime 'ch.qos.logback:logback-classic:1.1.3'

    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
}

// Ensure everything's using the same version of Groovy, Orient, SLF4J
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        switch (details.requested.group) {
            case 'org.codehaus.groovy' :
                details.useVersion '2.4.3'
                break
            case 'com.orientechnologies' :
                details.useVersion '2.0.9'
                break
            case 'org.slf4j' :
                details.useVersion '1.7.12'
                break
        }
    }
}

// Disable Groovy optimizations when testing code coverage
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(':jacocoTestReport')) {
        println "Disabling Groovy Optimizations for code coverage"
        compileGroovy.groovyOptions.optimizationOptions.all = false
    }
}

task "create-dirs" << {
   sourceSets*.java.srcDirs*.each { it.mkdirs() }
   sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}
